import tkinter as tk
from tkinter import messagebox
import random

class HangmanGame:
    def __init__(self, master):
        self.master = master
        self.master.title("Hangman Game")

        self.word_list = ['dog', 'cat', 'elephant', 'lion', 'tiger', 'zebra', 'giraffe','horse','rabbit', 'cheetah']
        self.word_to_guess = random.choice(self.word_list)
        self.hidden_word = ['_'] * len(self.word_to_guess)
        self.guesses_left = 6
        self.guesses_made = []

        self.font_color = "#333333"
        self.button_color = "#4CAF50"
        self.canvas_color = "#ffffff"

        self.welcome_label = tk.Label(master, text="Welcome to Hangman Game!", font=("Arial", 20), fg=self.font_color)
        self.welcome_label.pack()

        self.empty_label = tk.Label(master, text="", height=2)
        self.empty_label.pack()

        self.canvas = tk.Canvas(master, width=400, height=400, bg=self.canvas_color)
        self.canvas.pack()

        self.word_display = tk.Label(master, text=' '.join(self.hidden_word), font=("Arial", 18), fg=self.font_color)
        self.word_display.pack()

        self.guess_label = tk.Label(master, text=f'Guesses left: {self.guesses_left}', font=("Arial", 14), fg=self.font_color)
        self.guess_label.pack()

        self.guess_entry = tk.Entry(master, font=("Arial", 14))
        self.guess_entry.pack()

        self.guess_button = tk.Button(master, text='Guess', command=self.make_guess, font=("Arial", 14), bg=self.button_color, fg=self.font_color, width=10)
        self.guess_button.pack()

        self.draw_hangman()

        self.master.bind('<Return>', self.make_guess)

    def make_guess(self, event=None):
        guess = self.guess_entry.get().lower()

        if len(guess) != 1 or not guess.isalpha():
            messagebox.showwarning("Invalid Guess", "Please enter a single letter.")
            return

        if guess in self.guesses_made:
            messagebox.showwarning("Already Guessed", f"You've already guessed '{guess}'. Try a different letter.")
            return

        self.guesses_made.append(guess)

        if guess in self.word_to_guess:
            for i, letter in enumerate(self.word_to_guess):
                if letter == guess:
                    self.hidden_word[i] = guess
            self.word_display.config(text=' '.join(self.hidden_word))
        else:
            self.guesses_left -= 1
            self.guess_label.config(text=f'Guesses left: {self.guesses_left}')
            self.draw_hangman()

            if self.guesses_left == 3:
                hint = random.choice([letter for letter in self.word_to_guess if letter not in self.guesses_made])
                messagebox.showinfo("Hint", f"The word contains the letter '{hint}'")

        self.check_win_loss()
        self.guess_entry.delete(0, tk.END)

    def draw_hangman(self):
        parts = [
            self.draw_head,
            self.draw_body,
            self.draw_left_arm,
            self.draw_right_arm,
            self.draw_left_leg,
            self.draw_right_leg
        ]
        for i in range(6 - self.guesses_left):
            parts[i]()

    def draw_head(self):
        self.canvas.create_oval(150, 100, 250, 200, width=4)

    def draw_body(self):
        self.canvas.create_line(200, 200, 200, 300, width=4)

    def draw_left_arm(self):
        self.canvas.create_line(200, 230, 150, 260, width=4)

    def draw_right_arm(self):
        self.canvas.create_line(200, 230, 250, 260, width=4)

    def draw_left_leg(self):
        self.canvas.create_line(200, 300, 150, 350, width=4)

    def draw_right_leg(self):
        self.canvas.create_line(200, 300, 250, 350, width=4)

    def check_win_loss(self):
        if '_' not in self.hidden_word:
            messagebox.showinfo("Congratulations!", f"You guessed the word '{self.word_to_guess}'!")
            self.reset_game()
        elif self.guesses_left == 0:
            messagebox.showinfo("Game Over", f"The word was '{self.word_to_guess}'. Better luck next time!")
            self.reset_game()

    def reset_game(self):
        self.word_to_guess = random.choice(self.word_list)
        self.hidden_word = ['_'] * len(self.word_to_guess)
        self.guesses_left = 6
        self.guesses_made = []
        self.word_display.config(text=' '.join(self.hidden_word))
        self.guess_label.config(text=f'Guesses left: {self.guesses_left}')
        self.canvas.delete('all')
        self.draw_hangman()

def main():
    root = tk.Tk()
    game = HangmanGame(root)
    root.mainloop()

if __name__ == "__main__":
    main()
